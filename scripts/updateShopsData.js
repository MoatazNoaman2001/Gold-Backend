import mongoose from 'mongoose';
import Shop from '../models/shopModel.js';

// Connect to MongoDB
const connectDB = async () => {
  try {
    await mongoose.connect('mongodb://127.0.0.1:27017/gold-platform');
    console.log('โ Connected to MongoDB');
  } catch (error) {
    console.error('โ MongoDB connection error:', error);
    process.exit(1);
  }
};

// Update shops with missing data
const updateShopsData = async () => {
  try {
    console.log('๐ Starting shops data update...');
    
    // Get all shops
    const shops = await Shop.find({});
    console.log(`๐ Found ${shops.length} shops to update`);

    const sampleAddresses = [
      'ุดุงุฑุน ุงูุฌูููุฑูุฉุ ูุณุท ุงูุจูุฏุ ุงููุงูุฑุฉ',
      'ุดุงุฑุน ุงูุชุญุฑูุฑุ ุงูุฏููุ ุงูุฌูุฒุฉ',
      'ุดุงุฑุน ููุตูุ ุงููุฑูุ ุงูุฌูุฒุฉ',
      'ุดุงุฑุน ุงููุฑูุ ุงูุฌูุฒุฉ',
      'ุดุงุฑุน ุงููุตุฑุ ูุฏููุฉ ูุตุฑุ ุงููุงูุฑุฉ',
      'ุดุงุฑุน ุงูุนุฑูุจุฉุ ูุตุฑ ุงูุฌุฏูุฏุฉุ ุงููุงูุฑุฉ',
      'ุดุงุฑุน ุงูุซูุฑุฉุ ุงูุฅุณููุฏุฑูุฉ',
      'ููุฑููุด ุงููููุ ุงููุนุงุฏูุ ุงููุงูุฑุฉ'
    ];

    const sampleSpecialties = [
      ['ุฎูุงุชู ุฐูุจ', 'ุฏุจู ุฒูุงู', 'ูุฌููุฑุงุช ูุณุงุฆูุฉ'],
      ['ููุงุฆุฏ ุฐูุจ', 'ุฃุณุงูุฑ', 'ุญูู ุฐูุจ'],
      ['ุณุงุนุงุช ุฐูุจูุฉ', 'ุฎูุงุชู ุฑุฌุงููุฉ', 'ุณูุงุณู ุฐูุจ'],
      ['ูุฌููุฑุงุช ุฃุทูุงู', 'ุฏูุงูุงุช', 'ุฎูุงุชู ุฎุทูุจุฉ'],
      ['ุฃุณุงูุฑ ุฐูุจ', 'ุชูููุฒ ุฐูุจ', 'ุบูุงูุด'],
      ['ูุฌููุฑุงุช ูุฑุตุนุฉ', 'ุฃููุงุณ', 'ุฃุญุฌุงุฑ ูุฑููุฉ']
    ];

    const samplePhones = [
      '01012345678',
      '01123456789',
      '01234567890',
      '01098765432',
      '01187654321',
      '01076543210'
    ];

    // Update each shop
    for (let i = 0; i < shops.length; i++) {
      const shop = shops[i];
      const updates = {};

      // Add address if missing
      if (!shop.address && !shop.area) {
        updates.address = sampleAddresses[i % sampleAddresses.length];
      }

      // Add phone if missing
      if (!shop.phone && !shop.whatsapp) {
        updates.phone = samplePhones[i % samplePhones.length];
      }

      // Add specialties if missing
      if (!shop.specialties || shop.specialties.length === 0) {
        updates.specialties = sampleSpecialties[i % sampleSpecialties.length];
      }

      // Add working hours if missing
      if (!shop.workingHours) {
        updates.workingHours = '9:00 ุต - 9:00 ู';
      }

      // Add rating if missing
      if (!shop.rating && !shop.averageRating) {
        updates.rating = 4.0 + Math.random() * 1; // Random rating between 4.0 and 5.0
        updates.averageRating = updates.rating;
      }

      // Add review count if missing
      if (!shop.reviewCount) {
        updates.reviewCount = Math.floor(Math.random() * 50) + 5; // Random between 5 and 55
      }

      // Add description if missing
      if (!shop.description) {
        updates.description = `ูุชุฌุฑ ${shop.name || 'ูุฌููุฑุงุช'} - ููุฏู ุฃูุถู ุงููุฌููุฑุงุช ูุงูุฐูุจ ุนุงูู ุงูุฌูุฏุฉ ุจุฃุณุนุงุฑ ููุงุณุจุฉ`;
      }

      // Update the shop if there are changes
      if (Object.keys(updates).length > 0) {
        await Shop.findByIdAndUpdate(shop._id, updates);
        console.log(`โ Updated shop: ${shop.name || shop._id}`);
      }
    }

    console.log('๐ All shops updated successfully!');
  } catch (error) {
    console.error('โ Error updating shops:', error);
  }
};

// Run the update
const runUpdate = async () => {
  await connectDB();
  await updateShopsData();
  await mongoose.disconnect();
  console.log('๐ Disconnected from MongoDB');
  process.exit(0);
};

runUpdate();
